package alco;

public class L1_Complexity {
    /**
     * 1. time complexity
     * 어떤 알고리즘이 다루는 데이터의 개수에 비해 얼마만큼의 시간을 사용하는지 측정(몇번의 연산을 거쳐야 하는가?)
     * 2. space complexity
     * 데이터에 비해 얼마만큼의 메모리 공간을 사용하는가?
     *
     * 시간복잡도와 공간복잡도를 나타내기 위해 Big-O Notation(표기법)을 사용
     *
     * 빅 오(Big-O)의 종류와 예제
     * 1. O(1), 상수
     * 입력 데이터의 크기에 상관없이 언제나 일정한 시간이 걸리고 데이터의 양이 증가해도 성능에 거의 영향을 미치지 않습니다. 예제는 Stack의 Push, Pop이 대표적입니다.
     * 2. O(㏒ N), 로그
     * 입력 데이터의 크기가 커질수록 처리 시간이 로그만큼 짧아집니다. 예를 들어 데이터가 10배가 되면 처리 시간은 2배가 됩니다. 예제는 이진트리가 대표적이며 재귀가 순기능으로 이루어지는 경우에도 해당됩니다.
     * 3. O(N), 선형
     * 입력 데이터의 크기에 비례해 처리 시간이 증가합니다. 예를 들어 데이터가 10배가 되면 처리 시간도 10배가 됩니다. 예제는 for 문이 대표적입니다.
     * 4. O(N ㏒ N), 선형 로그
     * 입력 데이터가 많아질수록 처리 시간이 로그 배만큼 더 늘어납니다. 예를 들어 데이터가 10배가 되면 처리 시간은 약 20배가 됩니다. 예제는 퀵 정렬(Quick Sort), 합병 정렬(Merge Sort), 힙 정렬(Heap Sort)이 대표적입니다.
     * 5. O(N²), 다항
     * 입력 데이터가 많아질수록 처리시간이 급수적으로 늘어납니다. 예를 들어 데이터가 10배가 되면 처리 시간은 최대 100배가 됩니다. 예제는 삽입 정렬(Insertion Sort), 버블 정렬(Bubble Sort), 선택 정렬(Selection Sort), 이중 for 문이 대표적입니다.
     * 6. O(2ⁿ), 지수
     * 입력 데이터가 많아질수록 처리시간이 기하급수적으로 늘어납니다. 예제는 피보나치(Fibonacci) 수열이 대표적이며 재귀가 역기능으로 이루어질 경우에도 해당됩니다.
     */
}
